before_script:
    - python -V # Print out python version for debugging
    - pip install -r backend/requirements.txt # you can also use tox

stages:
    - Static Analysis
    - Test
    - Deploy

flake8:
    stage: Static Analysis
    image: python:3.6
    script:
        - flake8 backend/src/ --config backend/setup.cfg

mypy:
    stage: Static Analysis
    image: python:3.6
    script:
        - mypy backend/src/ --config-file backend/setup.cfg

unittest:
    stage: Test
    image: python:3.6
    script:
        - python3 -m unittest discover backend/src/test/ --top-level backend/src/

deploy-backend:
    stage: Deploy
    image: docker:latest
    script:
        - echo "Deploying Backend..."
        - docker login -u _ -p $HEROKU_API_KEY registry.heroku.com
        - docker build --file=backend/Dockerfile --rm=true -t registry.heroku.com/$HEROKU_APP_BACKEND/web ./backend
        - docker push registry.heroku.com/$HEROKU_APP_BACKEND/web
        - docker run -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli:latest container:release web -a $HEROKU_APP_BACKEND
        - echo "Backend deployment Complete!"
    only:
        - cd

deploy-frontend:
    stage: Deploy
    image: docker:latest
    script:
        - echo "Deploying Frontend..."
        - docker login -u _ -p $HEROKU_API_KEY registry.heroku.com
        - docker build --file=frontend/Dockerfile --rm=true -t registry.heroku.com/$HEROKU_APP_FRONTEND/web ./frontend
        - docker push registry.heroku.com/$HEROKU_APP_FRONTEND/web
        - docker run -e HEROKU_API_KEY=$HEROKU_API_KEY wingrunr21/alpine-heroku-cli:latest container:release web -a $HEROKU_APP_FRONTEND
        - echo "Frontend deployment Complete!"
    only:
        - cd
