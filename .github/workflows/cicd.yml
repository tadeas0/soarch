name: CI

on: push

env:
    BACKEND_IMAGE_TAG: "ghcr.io/tadeas0/backend:${{ github.sha }}"
    FRONTEND_IMAGE_TAG: ghcr.io/tadeas0/frontend:${{ github.sha }}

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Build images
              run: |
                  echo "BACKEND_IMAGE=$BACKEND_IMAGE_TAG" >> .env
                  echo "FRONTEND_IMAGE=$FRONTEND_IMAGE_TAG" >> .env
                  docker-compose -f docker-compose.yml -f docker-compose.ci.yml build --pull
            - name: Push images
              run: |
                  echo "Pushing images to $BACKEND_IMAGE_TAG $FRONTEND_IMAGE_TAG"
                  docker-compose -f docker-compose.yml -f docker-compose.ci.yml push
    flake8:
        runs-on: ubuntu-latest
        needs: [build]
        steps:
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Pull image
              run: docker pull $BACKEND_IMAGE_TAG
            - name: Run flake8
              run: docker run $BACKEND_IMAGE_TAG flake8 src/ --config setup.cfg

    mypy:
        runs-on: ubuntu-latest
        needs: [build]
        steps:
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Pull image
              run: docker pull $BACKEND_IMAGE_TAG
            - name: Run mypy
              run: docker run $BACKEND_IMAGE_TAG mypy src/ --config-file setup.cfg

    eslint:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Use Node.js 16
              uses: actions/setup-node@v3
              with:
                  node-version: 16
            - name: Install dependencies
              working-directory: ./frontend
              run: npm install --legacy-peer-deps
            - name: Run ESLint
              working-directory: ./frontend
              run: npm run lint

    unittest:
        runs-on: ubuntu-latest
        needs: [build]
        steps:
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Pull image
              run: docker pull $BACKEND_IMAGE_TAG
            - name: Run pytest
              run: docker run $BACKEND_IMAGE_TAG python3 -m pytest .

    deploy:
        runs-on: ubuntu-latest
        needs: [unittest, flake8, mypy, eslint]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
            - name: Setup ssh access
              run: |
                  eval $(ssh-agent -s)
                  mkdir -p ~/.ssh
                  echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
                  echo "${{ secrets.BACKEND_ENV_VARS }}" >> .env
            - name: Stop running containers
              run: docker-compose -H "ssh://$PROD_SERVER_USER@$PROD_SERVER_IP" -f docker-compose.yml -f docker-compose.prod.yml down
            - name: Build containers
              run: docker-compose -H "ssh://$PROD_SERVER_USER@$PROD_SERVER_IP" -f docker-compose.yml -f docker-compose.prod.yml build
            - name: Start containers
              run: docker-compose -H "ssh://$PROD_SERVER_USER@$PROD_SERVER_IP" -f docker-compose.yml -f docker-compose.prod.yml up -d
